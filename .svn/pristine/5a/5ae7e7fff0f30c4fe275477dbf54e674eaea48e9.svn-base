//
//  RTSPServer.m
//  EyeBaby
//
//  Created by     on 11/20/13.
//
//

#import "RTSPServerManager.h"

@implementation RTSPServerManager
+ (NSString*) getIPAddress
{
    NSString* address;
    struct ifaddrs *interfaces = nil;
    
    // get all our interfaces and find the one that corresponds to wifi
    if (!getifaddrs(&interfaces))
    {
        for (struct ifaddrs* addr = interfaces; addr != NULL; addr = addr->ifa_next)
        {
            if (([[NSString stringWithUTF8String:addr->ifa_name] isEqualToString:@"en0"]) &&
                (addr->ifa_addr->sa_family == AF_INET))
            {
                struct sockaddr_in* sa = (struct sockaddr_in*) addr->ifa_addr;
                address = [NSString stringWithUTF8String:inet_ntoa(sa->sin_addr)];
                break;
            }
        }
    }
    freeifaddrs(interfaces);
    return address;
}

-(id)init
{
    if (self = [super init])
    {
        m_pScheduler = NULL;
        m_pEnvironment = NULL;
        m_pMediaSource = NULL;
        m_bStop = 0;
        m_bRunning = false;
    }
    return self;
}

-(void)BackgroundRun
{
    m_bRunning = true;
    m_pEnvironment->taskScheduler().doEventLoop(&m_bStop);
    m_bRunning = false;
}

-(bool)Run
{
    if (m_pScheduler != NULL)
        return true;
    
    bool fSuccess = false;
    do {
        m_pScheduler = BasicTaskScheduler::createNew();
        if (!m_pScheduler)
            break;
        
        m_pEnvironment = BasicUsageEnvironment::createNew(*m_pScheduler);
        if (!m_pEnvironment)
            break;
        
        m_pMediaSource = MyMediaSource::createNew(*m_pEnvironment);
        if (!m_pMediaSource)
            break;
        
        m_pRTSPServer = RTSPServer::createNew(*m_pEnvironment);
        if (!m_pRTSPServer)
            break;
        
        ServerMediaSession* pSMS = ServerMediaSession::createNew(*m_pEnvironment, "iBaby");
        if (!pSMS)
            break;

        pSMS->addSubsession(MyVideoSubsession::createNew(*m_pEnvironment, *m_pMediaSource, VIDEO_BITRATE));
//        pSMS->addSubsession(MyAudioSubsession::createNew(*m_pEnvironment, *m_pMediaSource, AUDIO_BITRATE));
        
        m_pRTSPServer->addServerMediaSession(pSMS);
        m_serverURL = [NSString stringWithUTF8String:m_pRTSPServer->rtspURL(pSMS)];
        
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND,
                                                 (unsigned long)NULL), ^(void) {
            [self BackgroundRun];
        });
        fSuccess = true;
    } while (false);
    
    if (!fSuccess)
        [self End];
    
    return fSuccess;
}

-(void)End
{
    m_bStop = 1;
    while (true) {
        if(!m_bRunning)
            break;
        sleep(0.1f);
    }
    
    if(m_pRTSPServer)
    {
        Medium::close(m_pRTSPServer);
        m_pRTSPServer = NULL;
    }
    
    if (m_pMediaSource)
    {
        Medium::close(m_pMediaSource);
        m_pMediaSource = NULL;
    }
    
    if (m_pEnvironment)
    {
        m_pEnvironment->reclaim();
        m_pEnvironment = NULL;
    }
    
    if (m_pScheduler)
    {
        delete m_pScheduler;
        m_pScheduler = NULL;
    }
}

-(void)AddVideo:(AVPacket*)packet
{
    if (m_pMediaSource && packet)
        m_pMediaSource->AddVideo(packet);
}

-(void)AddAudio:(AVPacket*)packet
{
    if (m_pMediaSource && packet)
        m_pMediaSource->AddAudio(packet);
}

-(void)AddAudioRaw:(uint8_t*)buf size:(int)sz
{
    if (m_pMediaSource)
        m_pMediaSource->AddAudioRaw(buf, sz);
}

-(NSString*)GetServerUrl
{
    return m_serverURL;
}
@end
